<!DOCTYPE html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Kreeda-IoT</title>

    <!-- Your custom styles and scripts -->
    <link rel="stylesheet" href="~/css/style.css">

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation"></script>
    <link rel="shortcut icon" href="/assets/images/logo3.png"/>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <style>
        .chartjs-plugin-datalabels span {
            color: white !important;
        }

        .chartjs-render-monitor .chartjs-legend ul li span {
            color: white !important;
        }
    </style>
</head>

<body>
    <div class="content-wrapper">
        <div id="charts-container" class="row"></div>
    </div>
   
  
   


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            Chart.register(ChartDataLabels);
            const charts = {}; // Store chart instances

            function createOrUpdateChart(module, data, tack) {
                const usernames = data.map(item => item.userName);
                const handSewValues = data.map(item => item.sew);
                const deltaRunValues = data.map(item => item.runAvg);

                // Find the index of the highest value in runAvg
                let highestValueIndex = deltaRunValues.indexOf(Math.max(...deltaRunValues));

                const containerId = `barChart-${module}`;

                if (!charts[containerId]) {
                    // Create chart container for the module
                    const container = document.createElement('div');
                    container.classList.add('col-lg-12', 'grid-margin');
                    container.style.height = '320px';

                    const card = document.createElement('div');
                    card.classList.add('card');
                    card.style.height = '320px';

                    const cardBody = document.createElement('div');
                    cardBody.classList.add('card-body');
                    cardBody.style.height = '180px';

                    const title = document.createElement('h4');
                    title.classList.add('card-title', 'text-warning');
                    title.innerText = `Module: ${module}`;

                    const canvas = document.createElement('canvas');
                    canvas.id = containerId;
                    canvas.style.height = '90%';
                    canvas.style.width = '100%';

                    cardBody.appendChild(title);
                    cardBody.appendChild(canvas);
                    card.appendChild(cardBody);
                    container.appendChild(card);

                    document.getElementById('charts-container').appendChild(container);

                    // Create a new chart for the module
                    charts[containerId] = new Chart(canvas, {
                        type: 'bar',
                        data: {
                            labels: usernames,
                            datasets: [
                                {
                                    label: 'SMV Machine Time (Sec)',
                                    backgroundColor: 'rgba(150, 255, 150, 0.4)',
                                    borderColor: 'rgba(255, 191, 0, 1)',
                                    borderWidth: 2,
                                    data: handSewValues,
                                    stack: 'Stack 1',
                                },
                                {
                                    label: 'Actual Machine Time (Sec)',
                                    data: deltaRunValues,
                                    backgroundColor: deltaRunValues.map((value, index) => {
                                        return index === highestValueIndex
                                            ? 'rgba(255, 69, 0, 0.6)' // Highlight the bar with the highest value
                                            : 'rgba(150, 255, 150, 0.4)'; // Default color for other bars
                                    }),
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 2,
                                    stack: 'Stack 2',
                                }
                            ]
                        },
                        options: {
                            scales: {
                                x: {
                                    stacked: true,
                                    ticks: {
                                        color: 'white'
                                    }
                                },
                                y: {
                                    stacked: true,
                                    display: true,
                                    beginAtZero: true,
                                    ticks: {
                                        color: 'white'
                                    }
                                }
                            },
                            plugins: {
                                datalabels: {
                                    align: 'center',
                                    anchor: 'center',
                                    labels: {
                                        value: {
                                            color: 'white'
                                        }
                                    }
                                },
                                legend: {
                                    labels: {
                                        color: 'white'
                                    }
                                },
                                annotation: {
                                    annotations: [
                                        {
                                            type: 'line',
                                            mode: 'horizontal',
                                            scaleID: 'y',
                                            value: tack,
                                            borderColor: 'red',
                                            borderWidth: 1,
                                            label: {
                                                enabled: true,
                                                content: `Target: ${tack}`
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    });
                } else {
                    // Update existing chart for the module
                    const chart = charts[containerId];
                    chart.data.labels = usernames;

                    if (chart.data.datasets.length > 0) {
                        chart.data.datasets[0].data = handSewValues; // Update SMV Machine Time data
                    }
                    if (chart.data.datasets.length > 1) {
                        chart.data.datasets[1].data = deltaRunValues; // Update Actual Machine Time data
                        chart.data.datasets[1].backgroundColor = deltaRunValues.map((value, index) => {
                            return index === highestValueIndex
                                ? 'rgba(255, 69, 0, 0.6)' // Highlight the bar with the highest value
                                : 'rgba(150, 255, 150, 0.4)'; // Default color for other bars
                        });
                    }

                    chart.update();
                }
            }

            function fetchDataAndUpdateCharts() {
                fetch('/sewrealtime/Data')
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        Object.keys(data).forEach(module => {
                            const moduleData = data[module]?.data || [];
                            const tack = data[module]?.tack || 0;

                            if (!moduleData.length) {
                                console.warn(`No data available for module: ${module}`);
                                return;
                            }

                            createOrUpdateChart(module, moduleData, tack);
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                    });
            }

            fetchDataAndUpdateCharts();
            setInterval(fetchDataAndUpdateCharts, 60000);
        });
    </script>


    <!--red when gi above takt time and only first one-->
   <!---- <script>
    document.addEventListener('DOMContentLoaded', function () {
        Chart.register(ChartDataLabels);
        const charts = {}; // Store chart instances

        function createOrUpdateChart(module, data, tack) {
            const usernames = data.map(item => item.userName);
            const handSewValues = data.map(item => item.sew);
            const deltaRunValues = data.map(item => item.runAvg);

            // Find the first bar exceeding the tack time
            let firstExceedIndex = deltaRunValues.findIndex(value => value > tack);

            const containerId = `barChart-${module}`;

            if (!charts[containerId]) {
                // Create chart container for the module
                const container = document.createElement('div');
                container.classList.add('col-lg-12', 'grid-margin');
                container.style.height = '320px';

                const card = document.createElement('div');
                card.classList.add('card');
                card.style.height = '320px';

                const cardBody = document.createElement('div');
                cardBody.classList.add('card-body');
                cardBody.style.height = '180px';

                const title = document.createElement('h4');
                title.classList.add('card-title', 'text-warning');
                title.innerText = `Module: ${module}`;

                const canvas = document.createElement('canvas');
                canvas.id = containerId;
                canvas.style.height = '90%';
                canvas.style.width = '100%';

                cardBody.appendChild(title);
                cardBody.appendChild(canvas);
                card.appendChild(cardBody);
                container.appendChild(card);

                document.getElementById('charts-container').appendChild(container);

                // Create a new chart for the module
                charts[containerId] = new Chart(canvas, {
                    type: 'bar',
                    data: {
                        labels: usernames,
                        datasets: [
                            {
                                label: 'SMV Machine Time (Sec)',
                                backgroundColor: 'rgba(150, 255, 150, 0.4)',
                                borderColor: 'rgba(255, 191, 0, 1)',
                                borderWidth: 2,
                                data: handSewValues,
                                stack: 'Stack 1',
                            },
                            {
                                label: 'Actual Machine Time (Sec)',
                                data: deltaRunValues,
                                backgroundColor: deltaRunValues.map((value, index) => {
                                    if (index === firstExceedIndex) {
                                        return 'rgba(255, 69, 0, 0.6)'; // Highlight the first bar exceeding tack time
                                    }
                                    return 'rgba(150, 255, 150, 0.4)'; // Default color for other bars
                                }),
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 2,
                                stack: 'Stack 2',
                            }
                        ]
                    },
                    options: {
                        scales: {
                            x: {
                                stacked: true,
                                ticks: {
                                    color: 'white'
                                }
                            },
                            y: {
                                stacked: true,
                                display: true,
                                beginAtZero: true,
                                ticks: {
                                    color: 'white'
                                }
                            }
                        },
                        plugins: {
                            datalabels: {
                                align: 'center',
                                anchor: 'center',
                                labels: {
                                    value: {
                                        color: 'white'
                                    }
                                }
                            },
                            legend: {
                                labels: {
                                    color: 'white'
                                }
                            },
                            annotation: {
                                annotations: [
                                    {
                                        type: 'line',
                                        mode: 'horizontal',
                                        scaleID: 'y',
                                        value: tack,
                                        borderColor: 'red',
                                        borderWidth: 1,
                                        label: {
                                            enabled: true,
                                            content: `Target: ${tack}`
                                        }
                                    }
                                ]
                            }
                        }
                    }
                });
            } else {
                // Update existing chart for the module
                const chart = charts[containerId];
                chart.data.labels = usernames;

                if (chart.data.datasets.length > 0) {
                    chart.data.datasets[0].data = handSewValues; // Update SMV Machine Time data
                }
                if (chart.data.datasets.length > 1) {
                    chart.data.datasets[1].data = deltaRunValues; // Update Actual Machine Time data
                    chart.data.datasets[1].backgroundColor = deltaRunValues.map((value, index) => {
                        if (index === firstExceedIndex) {
                            return 'rgba(255, 69, 0, 0.6)'; // Highlight the first bar exceeding tack time
                        }
                        return 'rgba(150, 255, 150, 0.4)'; // Default color for other bars
                    });
                }

                // Update horizontal line value
                chart.options.plugins.annotation.annotations[0].value = tack;
                chart.options.plugins.annotation.annotations[0].label.content = `Target: ${tack}`;

                chart.update();
            }
        }

function fetchDataAndUpdateCharts() {
    fetch('/sewrealtime/Data')
        .then(response => response.json())
        .then(data => {
            console.log(data);
            Object.keys(data).forEach(module => {
                const moduleData = data[module]?.data || [];
                const tack = data[module]?.tack || 0;

                if (!moduleData.length) {
                    console.warn(`No data available for module: ${module}`);
                    return;
                }

                createOrUpdateChart(module, moduleData, tack);
            });
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });
}


        fetchDataAndUpdateCharts();
        setInterval(fetchDataAndUpdateCharts, 180000);
    });
</script>-->




</body>

</html>
