@{
  ViewBag.Title = "Styles";
}
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Measuring යාළුවා | Styles</title>
  <link rel="stylesheet" href="/assets/vendors/mdi/css/materialdesignicons.min.css">
  <link rel="stylesheet" href="/assets/vendors/css/vendor.bundle.base.css">
  <link rel="stylesheet" href="/assets/vendors/select2/select2.min.css">
  <link rel="stylesheet" href="/assets/vendors/select2-bootstrap-theme/select2-bootstrap.min.css">
  <link rel="stylesheet" href="/assets/css/style.css">
  <link rel="shortcut icon" href="/assets/images/favicon.ico" />
    <style>
            .container-fluid.page-body-wrapper,
        .main-panel,
        .content-wrapper {
            padding-left: 0 !important;
            padding-right: 0 !important;
            margin-left: 0 !important;
            margin-right: 0 !important;
            width: 100vw;
            max-width: 100vw;
        }

    body,
    html {
            overflow-x: hidden;
        }

    .table-responsive {
      max-height: 600px;
      overflow-y: auto;
    }

    .order-cell {
      width: 40px;
      text-align: center;
    }

    .delete-btn {
      color: #fff;
      background: #dc3545;
      border: none;
      border-radius: 4px;
      padding: 2px 10px;
    }

    .editable-cell {
      background: #f8f9fa;
      cursor: pointer;
    }

    .type-select {
      min-width: 90px;
        }

    #savingOverlay {
      display: none;
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0,0,0,0.4);
      z-index: 2000;
      justify-content: center;
      align-items: center;
    }
    #savingOverlay.active {
      display: flex;
    }
  </style>
</head>

<body>
  <div class="container-scroller">
    <div class="container-fluid page-body-wrapper">
      <a href="/GM" class="btn btn-outline-primary"
        style="position: absolute; top: 15px; left: 18px; z-index: 1050; font-weight: bold; border-radius: 50px; padding: 10px 22px; box-shadow: 0 2px 8px rgba(0,0,0,0.08); background: none; border-width: 2px;">
        <i class="mdi mdi-arrow-left"></i> Back
      </a>
      <div id="savingOverlay">
        <div style="display:flex;flex-direction:column;align-items:center;">
          <div class="saving-spinner" style="border:6px solid #f3f3f3;border-top:6px solid #4facfe;border-radius:50%;width:48px;height:48px;animation:spin 1s linear infinite;margin-bottom:18px;"></div>
          <div class="saving-message" style="color:#fff;font-size:1.2rem;font-weight:600;text-align:center;text-shadow:0 2px 8px #000;">Saving...</div>
        </div>
      </div>
      <style>
      @@keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
      }
      </style>
      <div class="main-panel">
        <div class="content-wrapper">
          <div class="row mb-4">
            <div class="col-lg-6">
              <div class="input-group">
                <input id="style-search-input" type="text" class="form-control" placeholder="Enter style name..."
                  list="style-list">
                <datalist id="style-list"></datalist>
                <button id="style-search-btn" class="btn btn-primary">Search</button>
              </div>
            </div>
          </div>
          <div class="row mb-2">
            <div class="col-lg-12 d-flex gap-2">
              <button id="add-size-btn" class="btn btn-info me-2" disabled>Add Size</button>
              <button id="add-measurement-btn" class="btn btn-info" disabled>Add Measurement</button>
            </div>
          </div>
          <div class="row">
            <div class="col-lg-12">
              <div class="card">
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table table-bordered" id="style-table">
                      <thead>
                        <tr id="style-table-header-row">
                          <!-- Dynamic header -->
                        </tr>
                      </thead>
                      <tbody id="style-table-body">
                        <!-- Dynamic rows -->
                      </tbody>
                    </table>
                  </div>
                  <div class="text-center mt-3">
                    <button id="submit-style-btn" class="btn btn-success" disabled>Submit</button>
                    @if (ViewBag.prvlgtyp != null && ViewBag.prvlgtyp >= 3) {
                    <button id="delete-style-btn" class="btn btn-danger ms-2">Delete Style</button>
                        }
                  </div>
                </div>
              </div>
            </div>
          </div>
          <footer class="footer mt-4">
            <div class="d-sm-flex justify-content-center justify-content-sm-between">
              <span class="text-muted d-block text-center text-sm-left d-sm-inline-block">Copyright © MAS KREEDA
                2024</span>
            </div>
          </footer>
        </div>
      </div>
    </div>
  </div>
  <script src="/assets/vendors/js/vendor.bundle.base.js"></script>
    <script src="/assets/vendors/select2/select2.min.js"></script>
    <script src="/assets/vendors/typeahead.js/typeahead.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.2/Sortable.min.js"></script>
  <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
  <script>
    var userPrvlgtyp = @(ViewBag.prvlgtyp ?? 0);
    let currentStyle = '';
    let sizeHeaders = [];
    let measurementTypes = [];
    let measurementTypeMap = {};
    let allStyles = [];
    let originalSizes = [];
    let originalMeasurements = [];

    $(document).ready(function () {
      // Fetch all styles for autocomplete
      $.post('/GM/getStyles', function (data) {
        if (typeof data === 'string') data = JSON.parse(data);
        allStyles = data.styles || [];
        const datalist = $('#style-list');
        datalist.empty();
        allStyles.forEach(style => datalist.append(`<option value="${style}">`));
      });

      // Fetch measurement types for Add Measurement dropdown
      $.get('/GM/getMeasurementTypes', function (data) {
        if (typeof data === 'string') data = JSON.parse(data);
        measurementTypes = (data.measurementTypes || []).map(mt => mt.name);
        measurementTypeMap = {};
        (data.measurementTypes || []).forEach(mt => { measurementTypeMap[mt.name] = mt.type; });
      });

      // Search style
      $('#style-search-btn').on('click', function () {
        const style = $('#style-search-input').val().trim();
        if (!style) { alert('Enter a style name.'); return; }
        if (!allStyles.includes(style)) { alert('Style not found.'); return; }
        searchStyle(style);
      });
      $('#style-search-input').on('keypress', function (e) {
        if (e.which === 13) $('#style-search-btn').click();
      });

      // Only allow add size if prvlgtyp >= 3 or for unsubmitted sizes
      $('#add-size-btn').on('click', function () {
        var size = prompt('Enter new size name:');
        size = size.trim().toUpperCase();
        if (!size) return;
        if (sizeHeaders.includes(size)) { alert('Size already exists.'); return; }
        addSizeColumn(size);
      });

      // Only allow add measurement if prvlgtyp >= 3 or for unsubmitted measurements
      $('#add-measurement-btn').on('click', async function () {
        let name = await promptMeasurementName();
        if (!name) return;
        addMeasurementRow(name);
      });

      // Submit
      $('#submit-style-btn').on('click', function () {
        submitStyleData();
      });
    });

    function searchStyle(style) {
      $.ajax({
        url: '/GM/getMeasurements',
        method: 'POST',
        data: { style: style },
        success: function (res) {
          let measurementsBySize = res.measurements || [];
          // Collect all unique measurement names and types
          let measurementMap = {};
          let allSizes = [];
          let allMeasurements = [];
          measurementsBySize.forEach(sizeBlock => {
            if (!allSizes.includes(sizeBlock.size)) allSizes.push(sizeBlock.size);
            sizeBlock.measurements.forEach(m => {
              if (!measurementMap[m.measurement]) {
                measurementMap[m.measurement] = { type: m.type, tolerance: m.tolerance, refs: {} };
                allMeasurements.push(m.measurement);
              }
              measurementMap[m.measurement].refs[sizeBlock.size] = m.reference;
            });
          });
          // Build measurements array for table rendering
          let measurements = Object.keys(measurementMap).map(name => {
            return {
              measurement: name,
              type: measurementMap[name].type,
              tolerance: measurementMap[name].tolerance,
              references: measurementMap[name].refs
            };
          });
          currentStyle = style;
          sizeHeaders = allSizes;
          originalSizes = allSizes.slice();
          originalMeasurements = allMeasurements.filter((v, i, a) => a.indexOf(v) === i).map(m => m.toUpperCase());
          renderTable(measurements, allSizes);
          $('#add-size-btn').prop('disabled', false);
          $('#add-measurement-btn').prop('disabled', false);
          $('#submit-style-btn').prop('disabled', false);
        },
        error: function () {
          alert('Error loading style data.');
        }
      });
    }

    function renderTable(measurements, sizes) {
      // Build header
      const headerRow = $('#style-table-header-row');
      headerRow.empty();
      headerRow.append('<th style="width:40px;">#</th>');
      headerRow.append('<th>Measurement</th>');
      headerRow.append('<th>Type</th>');
      headerRow.append('<th>Tolerance</th>');
      sizes.forEach(size => headerRow.append(`<th>${size}</th>`));
      headerRow.append('<th>Delete</th>');

      // Build body
      const body = $('#style-table-body');
      body.empty();
      let orderNum = 1;
      measurements.forEach(measurement => {
        let row = $('<tr draggable="true"></tr>');
        row.append(`<td class="order-cell">${orderNum}</td>`);
        row.append(`<td class="measurement-cell">${escapeHtml(measurement.measurement || '')}</td>`);
        row.append(`<td>${typeDropdown(measurement.type || 'p2p')}</td>`);
        row.append(`<td contenteditable="true" class="editable-cell">${measurement.tolerance || 0}</td>`);
        sizes.forEach(size => {
          let val = (measurement.references && measurement.references[size] !== undefined) ? measurement.references[size] : 0;
          row.append(`<td contenteditable="true" class="editable-cell">${val}</td>`);
        });
        if (userPrvlgtyp >= 3) {
            row.append(`<td><button class="delete-btn">Delete</button></td>`);
        } else {
            row.append('<td></td>');
        }
        body.append(row);
        orderNum++;
      });
      makeRowsDraggable();
      // Delete row (only if userPrvlgtyp >= 3)
      if (userPrvlgtyp >= 3) {
          $('.delete-btn').off('click').on('click', function () {
              handleDeleteMeasurement($(this).closest('tr'));
          });
      }
      renderDeleteSizeRow();
    }

    // Add a row at the bottom for deleting sizes
    function renderDeleteSizeRow() {
      // Remove any previous delete size row
      $('#delete-size-row').remove();
      if (!sizeHeaders.length) return;
      const headerRow = $('#style-table-header-row');
      const body = $('#style-table-body');
      // Only add as many delete buttons as there are size columns
      let row = $('<tr id="delete-size-row" style="background:#f8d7da;"></tr>');
      row.append(`<td colspan="4" style="text-align:right;font-weight:bold;">Delete Size:</td>`);

      console.log("Size length ", sizeHeaders.length);
      sizeHeaders.slice(0, sizeHeaders.length).forEach(size => {
        // Allow delete for all users if size is not in originalSizes (newly added), else only for privileged users
        if (userPrvlgtyp >= 3 || !originalSizes.includes(size)) {
            row.append(`<td><button class="btn btn-danger btn-sm delete-size-btn" data-size="${size}">Delete</button></td>`);
        } else {
            row.append('<td></td>');
        }
      });
      // Only one extra cell for the delete column, and no more
      row.append('<td></td>');
      body.append(row);
      // Delete size handler
      $('.delete-size-btn').off('click').on('click', function () {
        const size = $(this).data('size');
        handleDeleteSize(size);
      });
    }

    function handleDeleteSize(size) {
      // If the size is in originalSizes, warn the user before deleting
      if (originalSizes.includes(size)) {
        if (!confirm('Warning: This will delete all previous measurements taken using this size. Continue?')) return;
      }
      // Remove from sizeHeaders
      sizeHeaders = sizeHeaders.filter(s => s !== size);
      // Find the header index for this size
      const headerRow = $('#style-table-header-row');
      let sizeIdx = -1;
      headerRow.find('th').each(function (idx) {
        if ($(this).text().trim().toUpperCase() === size.trim().toUpperCase()) {
          sizeIdx = idx;
          $(this).remove();
        }
      });
      // Remove the cell at sizeIdx in every row (except the delete size row)
      $('#style-table-body tr').not('#delete-size-row').each(function () {
        $(this).find('td').eq(sizeIdx).remove();
      });

      // Remove from originalSizes if not present (new size)
      if (originalSizes.includes(size)) {
        // Call API to delete size
        $.ajax({
          url: '/GM/deleteSize',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({ style: currentStyle, size: size }),
          success: function (res) {
            // Optionally show a message
          },
          error: function () {
            alert('Error deleting size from server.');
          }
        });
        // Remove from originalSizes
        originalSizes = originalSizes.filter(s => s !== size);
      }
      // Remove and re-render delete size row
      renderDeleteSizeRow();
    }

    function addSizeColumn(size) {
      size = size.trim().toUpperCase(); // Always uppercase
      // Duplicate check (all entries in sizeHeaders are uppercase)
      if (sizeHeaders.includes(size)) return;
      // Add header as the last size column (before delete)
      const headerRow = $('#style-table-header-row');
      const ths = headerRow.find('th');
      ths.eq(ths.length - 1).before(`<th>${size}</th>`);
      // Add cell to each row before the delete button cell
      $('#style-table-body tr').each(function () {
        const tds = $(this).find('td');
        tds.eq(tds.length - 1).before(`<td contenteditable="true" class="editable-cell">0</td>`);
      });
      sizeHeaders.push(size);
      console.log('SizeHeaders:', sizeHeaders);
      updateOrderNumbers();
      renderDeleteSizeRow();
    }

    function addMeasurementRow(name) {
      name = name.trim().toUpperCase();
      let type = measurementTypeMap[name] || 'p2p';
      const row = $('<tr draggable="true"></tr>');
      row.append(`<td class="order-cell"></td>`);
      row.append(`<td class="measurement-cell">${escapeHtml(name)}</td>`);
      row.append(`<td>${typeDropdown(type)}</td>`);
      row.append(`<td contenteditable="true" class="editable-cell">0</td>`);
      sizeHeaders.forEach(() => row.append(`<td contenteditable="true" class="editable-cell">0</td>`));
      row.append(`<td><button class="delete-btn">Delete</button></td>`);
      // Insert before delete size row if present, else append
      const deleteSizeRow = $('#delete-size-row');
      if (deleteSizeRow.length) {
        row.insertBefore(deleteSizeRow);
            } else {
        $('#style-table-body').append(row);
      }
      updateOrderNumbers();
      $('.delete-btn').off('click').on('click', function () {
        handleDeleteMeasurement($(this).closest('tr'));
      });
    }

    function updateOrderNumbers() {
      $('#style-table-body tr').each(function (idx) {
        $(this).find('.order-cell').text(idx + 1);
      });
    }

    function typeDropdown(selected) {
      const types = ['p2p', 'curve', 'p2pMulti', 'curveCnt', 'manual'];
      let html = `<select class="form-control type-select">`;
      types.forEach(t => {
        html += `<option value="${t}"${t === selected ? ' selected' : ''}>${t}</option>`;
      });
      html += `</select>`;
      return html;
    }

    function makeRowsDraggable() {
      const tbody = document.getElementById('style-table-body');
      if (!tbody) return;
      if (tbody._sortable) return;
      tbody._sortable = true;
      Sortable.create(tbody, {
        animation: 150,
        handle: undefined,
        onEnd: function () {
          updateOrderNumbers();
        }
      });
      updateOrderNumbers();
    }

    function escapeHtml(text) {
      return text.replace(/["&'<>]/g, function (a) {
        return { '"': '&quot;', '&': '&amp;', "'": '&#39;', '<': '&lt;', '>': '&gt;' }[a];
      });
    }

    async function promptMeasurementName() {
      // Fetch measurement types if not loaded
      if (!Object.keys(measurementTypeMap).length) {
        await $.get('/GM/getMeasurementTypes', function (data) {
          if (typeof data === 'string') data = JSON.parse(data);
          measurementTypes = (data.measurementTypes || []).map(mt => mt.name);
          measurementTypeMap = {};
          (data.measurementTypes || []).forEach(mt => { measurementTypeMap[mt.name] = mt.type; });
        });
      }
      return new Promise((resolve) => {
        const input = $('<input type="text" class="form-control" list="measurement-type-list" placeholder="Measurement name...">');
        const datalist = $('<datalist id="measurement-type-list"></datalist>');
        measurementTypes.forEach(name => datalist.append(`<option value="${name}">`));
        const modal = $('<div class="modal" tabindex="-1" role="dialog" style="display:block;background:rgba(0,0,0,0.2);z-index:9999;"></div>');
        const dialog = $('<div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Add Measurement</h5></div><div class="modal-body"></div><div class="modal-footer"><button type="button" class="btn btn-primary">OK</button><button type="button" class="btn btn-secondary">Cancel</button></div></div></div>');
        dialog.find('.modal-body').append(input).append(datalist);
        modal.append(dialog);
        $('body').append(modal);
        input.focus();
        dialog.find('.btn-primary').on('click', function () {
          const val = input.val().trim();
          modal.remove();
          resolve(val);
        });
        dialog.find('.btn-secondary').on('click', function () {
          modal.remove();
          resolve(null);
        });
        input.on('keypress', function (e) {
          if (e.which === 13) dialog.find('.btn-primary').click();
        });
      });
    }

    function submitStyleData() {
      // Build payload
      const rows = $('#style-table-body tr').not('#delete-size-row'); // Exclude delete size row
      let dataBySize = {};
      sizeHeaders.forEach(size => dataBySize[size] = []);
      rows.each(function (idx) {
        const cells = $(this).find('td');
        const order = parseInt(cells.eq(0).text().trim());
        const measurement = cells.eq(1).text().trim();
        const type = cells.eq(2).find('select').val();
        const tolerance = parseFloat(cells.eq(3).text().trim()) || 0;
        sizeHeaders.forEach((size, sIdx) => {
          const reference = parseFloat(cells.eq(4 + sIdx).text().trim()) || 0;
          dataBySize[size].push({
            measurement: measurement,
            type: type,
            reference: reference,
            tolerance: tolerance,
            order: order
          });
        });
      });
      // Build final payload
      const payload = {
        Style: currentStyle,
        Data: Object.keys(dataBySize).map(size => ({
          size: size,
          measurements: dataBySize[size]
        }))
      };
      // Send AJAX POST to /GM/insertStyleData
      $('#savingOverlay').addClass('active');
      $.ajax({
        url: '/GM/insertStyleData',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(payload),
        success: function (res) {
            if (typeof res === 'string') {
                try { res = JSON.parse(res); } catch (e) { }
            }
            $('#savingOverlay').removeClass('active');
            if (res && (res.success === true || res.status === 'success' || (res.message && typeof res.message === 'string'))) {
                alert(res.message || 'Style data uploaded successfully!');
                // Refresh the table after successful submit
                if (currentStyle) searchStyle(currentStyle);
            } else {
                alert('Upload complete, but check server response.');
            }
        },
        error: function (xhr, status, error) {
            $('#savingOverlay').removeClass('active');
            alert('Error uploading style data: ' + error);
        }
    });
}

    // Delete measurement logic
    function handleDeleteMeasurement(row) {
      const measurement = row.find('.measurement-cell').text().trim().toUpperCase();
      console.log('Trying to delete measurement:', measurement, 'Originals:', originalMeasurements);
      if (originalMeasurements.includes(measurement)) {
        if (!confirm('Warning: This will delete all previous measurements taken using this measurement. Continue?')) return;
        $.ajax({
          url: '/GM/removeStyleM',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({ Style: currentStyle, Measurement: measurement }),
          success: function (res) {
            // Optionally show a message
            row.remove();
            updateOrderNumbers();
            // Remove from originalMeasurements
            originalMeasurements = originalMeasurements.filter(m => m !== measurement);
          },
          error: function () {
            alert('Error deleting measurement from server.');
          }
        });
      } else {
        row.remove();
        updateOrderNumbers();
      }
    }

    // Delete Style button handler
    $('#delete-style-btn').on('click', function () {
        if (userPrvlgtyp < 3) return;
        if (!currentStyle) return;
        if (!confirm('Are you sure you want to delete this style? This will remove all measurements and sizes for this style.')) return;
        $.ajax({
            url: '/GM/removeStyle',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ Style: currentStyle }),
            success: function (res) {
                if (typeof res === 'string') {
                    try { res = JSON.parse(res); } catch (e) { }
                }
                if (res && (res.success === true || res.status === 'success' || (res.message && typeof res.message === 'string'))) {
                    alert(res.message || 'Style deleted successfully!');
                    window.location.reload();
                } else {
                    alert('Delete complete, but check server response.');
                }
            },
            error: function (xhr, status, error) {
                alert('Error deleting style: ' + error);
            }
        });
    });
    </script>
</body>

</html>