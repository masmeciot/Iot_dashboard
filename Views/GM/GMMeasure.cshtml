<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Measuring යාළුවා</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            color: #fff;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
        }

        /* Fixed Navbar */
        .navbar {
            background: rgba(0, 15, 46, 0.9);
            backdrop-filter: blur(10px);
            padding: 10px 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 60px;
        }

        .navbar h3 {
            font-size: 1.5rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            background: linear-gradient(45deg, #4facfe, #00f2fe);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        /* Content Wrapper */
        .content-wrapper {
            flex: 1;
            display: flex;
            flex-direction: column;
            margin-top: 60px;
            overflow: auto;
            padding: 15px;
        }

        /* Form Section */
        #DetailForm {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            padding: 15px;
        }

        .form-container {
            background: rgba(0, 20, 50, 0.8);
            border-radius: 12px;
            padding: 20px;
            width: 100%;
            max-width: 500px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(100, 180, 255, 0.3);
        }

        .form-container h2 {
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.5rem;
            color: #4facfe;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 600;
            color: #a0d2ff;
            font-size: 0.9rem;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: none;
            border-radius: 6px;
            background: rgba(0, 30, 60, 0.7);
            color: #fff;
            font-size: 0.95rem;
            border: 1px solid rgba(100, 180, 255, 0.2);
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #4facfe;
            box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.3);
        }

        .button-container {
            display: flex;
            justify-content: space-between;
            gap: 12px;
            margin-top: 20px;
        }

        .btn {
            flex: 1;
            padding: 10px 15px;
            border: none;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #4facfe, #00f2fe);
            color: #001f3f;
        }

        .btn-secondary {
            background: rgba(100, 100, 150, 0.5);
            color: #fff;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .btn:active {
            transform: translateY(0);
        }

        /* Measurement Section */
        #MeasureInterface {
            display: none;
            flex-direction: column;
            height: 100%;
            gap: 15px;
        }

        /* Cards */
        .cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
            gap: 12px;
            margin-bottom: 15px;
        }

        .measurement-card {
            background: rgba(0, 20, 50, 0.8);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(100, 180, 255, 0.2);
        }

        .measurement-card h5 {
            font-size: 0.9rem;
            color: #a0d2ff;
            margin-bottom: 8px;
        }

        .measurement-card div {
            font-size: 1.3rem;
            font-weight: 700;
        }

        /* Status Colors */
        .status-pass {
            color: #2ecc71;
        }

        .status-fail {
            color: #e74c3c;
        }

        /* Graphs Area */
        #graphsArea {
            flex: 1;
            background: rgba(0, 20, 50, 0.8);
            border-radius: 10px;
            padding: 15px;
            display: flex;
            flex-direction: column;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(100, 180, 255, 0.2);
            overflow: hidden;
        }

        .graph-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .graph-header h4 {
            color: #a0d2ff;
            font-size: 1rem;
        }

        .graph-container {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            background: rgba(0, 30, 60, 0.6);
            border-radius: 8px;
            padding: 10px;
        }

        .graph-placeholder {
            color: rgba(160, 210, 255, 0.5);
            text-align: center;
            padding: 10px;
        }

        /* Navigation Buttons */
        #measurementNav {
            display: flex;
            justify-content: center;
            gap: 15px;
            padding: 10px 0;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .cards-container {
                grid-template-columns: repeat(2, 1fr);
            }

            #measurementNav {
                flex-direction: column;
                align-items: center;
            }

            .btn {
                width: 100%;
            }
        }

        @@media (max-width: 480px) {
            .cards-container {
                grid-template-columns: 1fr;
            }

            .form-container {
                padding: 15px;
            }

            .navbar h3 {
                font-size: 1.3rem;
            }

            .form-container h2 {
                font-size: 1.3rem;
            }
        }

        #graphsArea, .graph-container, #graphsContainer {
            height: 100%;
            min-height: 0;
        }
        #graphsContainer {
            display: flex;
            flex-direction: column;
            height: 100%;
            min-height: 0;
        }
        .graphs-row {
            display: flex;
            flex: 1 1 0;
            gap: 15px;
            min-height: 0;
        }
        .graphs-row > div {
            flex: 1 1 0;
            min-width: 0;
            min-height: 0;
            display: flex;
            flex-direction: column;
        }
        .graphs-row canvas {
            width: 100% !important;
            height: 100% !important;
            min-height: 0;
            min-width: 0;
            display: block;
        }

        #savingOverlay {
            display: none;
            position: fixed;
            top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.4);
            z-index: 2000;
            justify-content: center;
            align-items: center;
        }
        #savingOverlay.active {
            display: flex;
        }
        .saving-spinner {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #4facfe;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            animation: spin 1s linear infinite;
            margin-bottom: 18px;
        }
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .saving-message {
            color: #fff;
            font-size: 1.2rem;
            font-weight: 600;
            text-align: center;
            text-shadow: 0 2px 8px #000;
        }
    </style>
</head>

<body>
    <!-- Fixed Navbar -->
    <div class="navbar">
        <img src="~/images/MASLogo.png" alt="Logo" style="height: 40px; vertical-align: middle; margin-right: 12px;">
        @* <h3 style="display: inline-block; vertical-align: middle; margin: 0;">Measuring යාළුවා</h3> *@
    </div>

    <!-- Content Wrapper -->
    <div class="content-wrapper">
        <!-- Form Section -->
        <section id="DetailForm" class="DetailForm">
            <div class="form-container">
                <h2>Garment Details</h2>
                <div class="form-group">
                    <label for="SOLI">SOLI</label>
                    <input type="text" class="form-control" id="SOLI" name="SOLI"
                        placeholder="Enter Sales Order Line Item">
                </div>
                <div class="form-group">
                    <label for="EPF">EPF</label>
                    <input type="text" class="form-control" id="EPF" name="EPF" placeholder="Enter EPF">
                </div>
                <div class="form-group">
                    <label for="station">Station</label>
                    <input type="text" class="form-control" id="station" name="station" placeholder="Enter Station">
                </div>
                <div class="form-group">
                    <label for="styleSelector">Style</label>
                    <select class="form-control" id="styleSelector">
                        <option value="" disabled selected>Loading styles...</option>
                    </select>
                </div>
                <div class="form-group" id="sizeSelectDIV" style="display: none;">
                    <label for="sizeSelector">Size</label>
                    <select class="form-control" id="sizeSelector">
                        <option value="" disabled selected>Loading sizes...</option>
                    </select>
                </div>
                <div class="button-container">
                    <button type="button" class="btn btn-primary" onclick="nextBtn()">
                        <i class="fas fa-arrow-right"></i> Next
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="window.location.href='@Url.Action("Index", "GM")'">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                </div>
            </div>
        </section>

        <!-- Measurement Section -->
        <section id="MeasureInterface" class="MeasureInterface">
            <!-- Measurement Cards -->
            <div class="cards-container" id="measurementCards">
                <div class="measurement-card" id="cardMeasurement">
                    <h5>Measurement</h5>
                    <div id="measurementName">-</div>
                </div>
                <div class="measurement-card" id="cardMeasuredValue">
                    <h5>Measured Value (mm)</h5>
                    <div id="measuredValue">-</div>
                </div>
                <div class="measurement-card" id="cardTolerance">
                    <h5>Reference (mm)</h5>
                    <div id="reference">-</div>
                </div>
                <div class="measurement-card" id="cardStatus">
                    <h5>Status</h5>
                    <div id="passFailStatus">-</div>
                </div>
                <div class="measurement-card" id="cardCurrentSize">
                    <h5>Current Size</h5>
                    <div id="currentSize">-</div>
                </div>
                <div class="measurement-card" id="cardPassPercentage">
                    <h5>Pass Percentage</h5>
                    <div id="passPercentageValue">-</div>
                </div>
                <div class="measurement-card" id="cardMostDefective">
                    <h5>Most Defective Measurement</h5>
                    <div id="mostDefectiveValue">-</div>
                </div>
            </div>

            <!-- Graphs Area -->
            <div id="graphsArea">
                <div class="graph-container">
                    <div id="graphsContainer" class="graph-placeholder">
                        <i class="fas fa-chart-line" style="font-size: 2.5rem; margin-bottom: 8px;"></i>
                        <p>Measurement graphs will appear here</p>
                    </div>
                </div>
            </div>

            <!-- Navigation Buttons -->
            <div id="measurementNav">
                <button type="button" class="btn btn-secondary" onclick="showDetailForm()">
                    <i class="fas fa-arrow-left"></i> Back
                </button>
                <button type="button" class="btn btn-primary" onclick="prevMeasurement()">
                    <i class="fas fa-chevron-left"></i> Previous
                </button>
                <button type="button" class="btn btn-primary" onclick="nextMeasurement()">
                    Next <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </section>
    </div>

    <!-- Saving Overlay -->
    <div id="savingOverlay">
        <div style="display: flex; flex-direction: column; align-items: center;">
            <div class="saving-spinner"></div>
            <div class="saving-message">Saving...</div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        var measData = [];
        var currentSizeObj = null;
        var currentMeasurementIdx = 0;
        var measuredValues = {}; // { size: { measurement: value } }
        var lastInputTime = 0;
        var garmentSession = '';
        var plant = '';
        var username = '';
        var prvlg = '';
        var allGarmentMeasurements = [];
        var graphPage = 0;
        var graphInterval = null;
        var chartInstances = [];

        document.addEventListener('DOMContentLoaded', function () {
            loadStyles();
            var styleSelector = document.getElementById('styleSelector');
            var sizeSelectDIV = document.getElementById('sizeSelectDIV');
            styleSelector.addEventListener('change', function () {
                console.log("Style selected..Loading sizes...")
                getMeasureData();
                sizeSelectDIV.style.display = '';
            });
            styleSelector.addEventListener('click', function () {
                console.log("Clicked on the style selector");
                var sizeSelector = document.getElementById('sizeSelector');
                sizeSelector.innerHTML = '';
                var placeholderOption = document.createElement('option');
                placeholderOption.value = '';
                placeholderOption.text = 'Loading sizes...';
                placeholderOption.disabled = true;
                placeholderOption.selected = true;
                sizeSelector.appendChild(placeholderOption);
            });
        });

        function loadStyles() {
            console.log("Loading styles...");
            console.log(username);
            console.log(prvlg);
            $.ajax({
                url: '/GM/getStyles',
                method: 'POST',
                success: function (response) {
                    var styleSelector = document.getElementById('styleSelector');
                    styleSelector.innerHTML = '';

                    // Add placeholder option
                    var placeholderOption = document.createElement('option');
                    placeholderOption.value = '';
                    placeholderOption.text = 'Select a style';
                    placeholderOption.disabled = true;
                    placeholderOption.selected = true;
                    styleSelector.appendChild(placeholderOption);

                    if (response.styles && Array.isArray(response.styles)) {
                        response.styles.forEach(function (style) {
                            var option = document.createElement('option');
                            option.value = style;
                            option.text = style;
                            styleSelector.appendChild(option);
                        });
                    }
                }
            });
        }

        function generateSession() {
            const array = new Uint8Array(20);
            window.crypto.getRandomValues(array);
            let base64 = btoa(String.fromCharCode.apply(null, array));
            base64 = base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
            return username + '_' + base64;
        }

        function nextBtn() {
            var soli = document.getElementById('SOLI').value.trim();
            var epf = document.getElementById('EPF').value.trim();
            var style = document.getElementById('styleSelector').value;
            var size = document.getElementById('sizeSelector').value;

            if (!soli || !epf || !style || !size) {
                alert("Please fill in all fields: SOLI, EPF, Style, and Size.");
                return;
            }

            garmentSession = generateSession();
            document.getElementById('DetailForm').style.display = 'none';
            document.getElementById('MeasureInterface').style.display = 'flex';

            // Reset measured values for new garment
            if (!measuredValues[size]) measuredValues[size] = {};
            currentMeasurementIdx = 0;
            showMeasurement(currentMeasurementIdx);
        }

        function getMeasureData() {
            var style = document.getElementById('styleSelector').value;
            console.log("Loading Measurement Data...");
            $.ajax({
                url: '/GM/getMeasurements',
                method: 'POST',
                data: { style: style },
                success: function (response) {
                    console.log("Received Data")
                    measData = response.measurements;
                    console.log(measData);
                    loadSizes();
                }
            });
        }

        function loadSizes() {
            console.log("Getting sizes...");
            var sizeSelector = document.getElementById('sizeSelector');
            sizeSelector.innerHTML = '';

            var placeholderOption = document.createElement('option');
            placeholderOption.value = '';
            placeholderOption.text = 'Select a size';
            placeholderOption.disabled = true;
            placeholderOption.selected = true;
            sizeSelector.appendChild(placeholderOption);

            if (Array.isArray(measData)) {
                measData.forEach(function (item) {
                    if (item.size) {
                        var option = document.createElement('option');
                        option.value = item.size;
                        option.text = item.size;
                        sizeSelector.appendChild(option);
                    }
                });
            }
            sizeSelector.onchange = onSizeSelected;
        }

        function onSizeSelected() {
            var size = document.getElementById('sizeSelector').value;
            currentSizeObj = (measData || []).find(x => x.size === size);
            currentMeasurementIdx = 0;

            if (currentSizeObj && Array.isArray(currentSizeObj.measurements) && currentSizeObj.measurements.length > 0) {
                showMeasurement(currentMeasurementIdx);
            } else {
                clearMeasurementCards();
            }

            document.getElementById('currentSize').innerText = size || '-';
        }

        function showMeasurement(idx) {
            if (!currentSizeObj || !currentSizeObj.measurements || !currentSizeObj.measurements[idx]) {
                clearMeasurementCards();
                return;
            }

            var m = currentSizeObj.measurements[idx];
            document.getElementById('measurementName').innerText = m.measurement || '-';

            // Measured value input
            var measuredValueDiv = document.getElementById('measuredValue');
            measuredValueDiv.innerHTML = `<input id="measuredValueInput" type="number" class="form-control" style="width: 120px; margin: 0 auto; text-align: center; font-size: 1.2em;" autocomplete="off" />`;

            var input = document.getElementById('measuredValueInput');
            var size = document.getElementById('sizeSelector').value;

            if (measuredValues[size] && measuredValues[size][m.measurement]) {
                input.value = measuredValues[size][m.measurement];
            }

            input.oninput = function (e) {
                var now = Date.now();
                if (now - lastInputTime > 2000) {
                    input.value = e.target.value.slice(-1);
                }
                lastInputTime = now;

                if (!measuredValues[size]) measuredValues[size] = {};
                measuredValues[size][m.measurement] = input.value;
                updatePassFail(input.value, m);
                updateGraphsForCurrentGarment();
            };

            // Reference ± Tolerance
            document.getElementById('reference').innerText = `${m.reference} ± ${m.tolerance}`;

            // Status
            updatePassFail(input.value, m);

            // Focus input on show
            setTimeout(() => { input.focus(); }, 100);
            updateGraphsForCurrentGarment();
        }

        function updatePassFail(val, m) {
            var statusDiv = document.getElementById('passFailStatus');
            var ref = Number(m.reference);
            var tol = Number(m.tolerance);
            var num = Number(val);

            if (!val) {
                statusDiv.innerText = '-';
                statusDiv.className = '';
                return;
            }

            if (num >= (ref - tol) && num <= (ref + tol)) {
                statusDiv.innerText = 'PASS';
                statusDiv.className = 'status-pass';
            } else {
                statusDiv.innerText = 'FAIL';
                statusDiv.className = 'status-fail';
            }
        }

        function clearMeasurementCards() {
            document.getElementById('measurementName').innerText = '-';
            document.getElementById('measuredValue').innerHTML = '-';
            document.getElementById('reference').innerText = '-';
            document.getElementById('passFailStatus').innerText = '-';
            document.getElementById('passFailStatus').className = '';
            document.getElementById('currentSize').innerText = '-';
        }

        function prevMeasurement() {
            if (!currentSizeObj || !currentSizeObj.measurements) return;
            if (currentMeasurementIdx > 0) {
                currentMeasurementIdx--;
                showMeasurement(currentMeasurementIdx);
            }
        }

        function nextMeasurement() {
            if (!currentSizeObj || !currentSizeObj.measurements) return;
            if (currentMeasurementIdx < currentSizeObj.measurements.length - 1) {
                currentMeasurementIdx++;
                showMeasurement(currentMeasurementIdx);
            } else {
                checkOverallStatusAndPrompt();
            }
        }

        function checkOverallStatusAndPrompt() {
            var size = document.getElementById('sizeSelector').value;
            var measurements = (currentSizeObj && currentSizeObj.measurements) ? currentSizeObj.measurements : [];
            var allPass = true;
            var measurementResults = [];
            measurements.forEach(function (m) {
                var val = measuredValues[size] && measuredValues[size][m.measurement] ? Number(measuredValues[size][m.measurement]) : null;
                var offset = val !== null ? val - Number(m.reference) : null;
                var mStatus = (val !== null && val >= (m.reference - m.tolerance) && val <= (m.reference + m.tolerance)) ? 'Pass' : 'Fail';
                if (mStatus === 'Fail') allPass = false;
                measurementResults.push({
                    Measurement: m.measurement,
                    Value: val,
                    Offset: offset,
                    mStatus: mStatus
                });
            });
            var status = allPass ? 'Pass' : 'Fail';
            if (!allPass) {
                if (confirm('Garment failed. Would you like to save or retry? (OK = Save, Cancel = Retry)')) {
                    saveGarment(status, measurementResults);
                } else {
                    // Retry: clear values for this size and go to first measurement
                    measuredValues[size] = {};
                    currentMeasurementIdx = 0;
                    showMeasurement(currentMeasurementIdx);
                }
            } else {
                saveGarment(status, measurementResults);
            }
        }

        function saveGarment(status, measurementResults) {
            var soli = document.getElementById('SOLI').value.trim();
            var epf = Number(document.getElementById('EPF').value.trim());
            var style = document.getElementById('styleSelector').value;
            var size = document.getElementById('sizeSelector').value;
            var payload = {
                Session: garmentSession,
                Style: style,
                Size: size,
                SOLI: soli,
                EPF: epf,
                Status: status,
                DateTime: new Date().toISOString().replace('T', ' ').substring(0, 23),
                Station: (plant + "_" + (document.getElementById('station').value)).toUpperCase(),
                Measurements: measurementResults
            };

            // --- UI Lock: disable navigation and input during save ---
            setUILock(true);

            $.ajax({
                url: '/GM/saveMData',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (res) {
                    // Only add this garment's measurements to the global array for graphing after successful save
                    allGarmentMeasurements.push({ size, measurements: measurementResults });
                    updateGraphsForCurrentGarment();
                    @* alert('Garment data saved!'); *@
                    measuredValues[size] = {};
                    currentMeasurementIdx = 0;
                    showMeasurement(currentMeasurementIdx);
                    setUILock(false);
                },
                error: function () {
                    // On error, prompt user to retry or ignore
                    setUILock(false);
                    if (confirm('Error saving garment data. Would you like to retry? (OK = Retry, Cancel = Ignore garment)')) {
                        saveGarment(status, measurementResults);
                    } else {
                        // Ignore/cancel: do not add to allGarmentMeasurements, clear measured values for this size
                        measuredValues[size] = {};
                        currentMeasurementIdx = 0;
                        showMeasurement(currentMeasurementIdx);
                    }
                }
            });
        }

        // Helper to lock/unlock UI during save
        var isUILocked = false;
        function setUILock(lock) {
            isUILocked = lock;
            // Disable/enable navigation buttons
            var navBtns = document.querySelectorAll('#measurementNav button');
            navBtns.forEach(btn => btn.disabled = lock);
            // Disable/enable measured value input
            var input = document.getElementById('measuredValueInput');
            if (input) input.disabled = lock;
            // Show/hide saving overlay
            var overlay = document.getElementById('savingOverlay');
            if (overlay) overlay.className = lock ? 'active' : '';
        }

        function updateGraphsForCurrentGarment() {
            var size = document.getElementById('sizeSelector').value;
            if (!currentSizeObj || !Array.isArray(currentSizeObj.measurements)) {
                renderGraphs([]);
                // Also update summary cards to blank
                document.getElementById('passPercentageValue').innerText = '-';
                document.getElementById('mostDefectiveValue').innerText = '-';
                return;
            }
            // Build graph data for each measurement name
            var measurementNames = currentSizeObj.measurements.map(m => m.measurement);
            var referenceMap = {};
            currentSizeObj.measurements.forEach(m => {
                referenceMap[m.measurement] = { ref: m.reference, tol: m.tolerance };
            });
            // For each measurement, collect measured values for all garments
            var graphData = measurementNames.map(function (name) {
                var ref = referenceMap[name].ref;
                var tol = referenceMap[name].tol;
                var measuredVals = allGarmentMeasurements
                    .filter(g => g.size === size)
                    .map(g => {
                        var m = g.measurements.find(x => x.Measurement === name);
                        return m ? m.Value : null;
                    });
                // Add current in-progress value if not yet saved
                var currentVal = measuredValues[size] && measuredValues[size][name] ? Number(measuredValues[size][name]) : null;
                if (currentVal !== null && (measuredVals.length === 0 || measuredVals.length < allGarmentMeasurements.length + 1)) {
                    measuredVals.push(currentVal);
                }
                return {
                    name: name,
                    measuredVals: measuredVals,
                    reference: ref,
                    plusTol: ref + tol,
                    minusTol: ref - tol
                };
            });
            renderGraphs(graphData);

            // --- Update Pass Percentage and Most Defective Measurement ---
            // Calculate pass/total for this size
            var garments = allGarmentMeasurements.filter(g => g.size === size);
            var total = garments.length;
            var passed = garments.filter(g => (g.measurements.every(m => m.mStatus === 'Pass'))).length;
            var percent = total > 0 ? Math.round((passed / total) * 100) : 0;
            document.getElementById('passPercentageValue').innerText = total > 0 ? `${passed} / ${total} (${percent}%)` : '-';

            // Calculate most defective measurement
            var failCounts = {};
            garments.forEach(g => {
                g.measurements.forEach(m => {
                    if (m.mStatus === 'Fail') {
                        failCounts[m.Measurement] = (failCounts[m.Measurement] || 0) + 1;
                    }
                });
            });
            var mostDefective = '-';
            var maxFails = 0;
            for (var key in failCounts) {
                if (failCounts[key] > maxFails) {
                    maxFails = failCounts[key];
                    mostDefective = key + (maxFails > 1 ? ` (${maxFails})` : '');
                }
            }
            document.getElementById('mostDefectiveValue').innerText = mostDefective;
        }

        function showDetailForm() {
            document.getElementById('DetailForm').style.display = 'flex';
            document.getElementById('MeasureInterface').style.display = 'none';
            // Clear graph interval
            if (graphInterval) {
                clearInterval(graphInterval);
                graphInterval = null;
            }
        }
        function renderGraphs(measurements) {
            const graphsContainer = document.getElementById('graphsContainer');
            graphsContainer.innerHTML = '';

            // Destroy old charts
            if (chartInstances && Array.isArray(chartInstances)) {
                chartInstances.forEach(c => {
                    if (c && typeof c.destroy === 'function') {
                        try {
                            c.destroy();
                        } catch (e) {
                            console.error("Error destroying chart:", e);
                        }
                    }
                });
            }
            chartInstances = [];

            if (!Array.isArray(measurements) || measurements.length === 0) {
                graphsContainer.innerHTML = '<div class="graph-placeholder"><i class="fas fa-chart-line" style="font-size: 2.5rem; margin-bottom: 8px;"></i><p>No measurement data available</p></div>';
                return;
            }

            // Group measurements in sets of 4 (for 2x2 grid)
            const groups = [];
            for (let i = 0; i < measurements.length; i += 4) {
                groups.push(measurements.slice(i, i + 4));
            }

            // Clear any existing interval
            if (graphInterval) {
                clearInterval(graphInterval);
                graphInterval = null;
            }

            function showGroup(page) {
                graphsContainer.innerHTML = '';
                const group = groups[page] || [];

                // Create a flex column container for two rows
                const flexContainer = document.createElement('div');
                flexContainer.id = 'graphsContainer';
                flexContainer.className = '';
                flexContainer.style.display = 'flex';
                flexContainer.style.flexDirection = 'column';
                flexContainer.style.width = '100%';
                flexContainer.style.height = '100%';
                flexContainer.style.gap = '15px';

                // First row (first 2 graphs)
                const row1 = document.createElement('div');
                row1.className = 'graphs-row';
                // Second row (next 2 graphs)
                const row2 = document.createElement('div');
                row2.className = 'graphs-row';

                function createGraphDiv(m, idx) {
                    const graphDiv = document.createElement('div');
                    graphDiv.id = `graph_${idx}`;
                    graphDiv.style.flex = '1 1 0';
                    graphDiv.style.minWidth = '0';
                    graphDiv.style.minHeight = '0';
                    graphDiv.style.display = 'flex';
                    graphDiv.style.flexDirection = 'column';
                    graphDiv.style.alignItems = 'center';
                    graphDiv.style.justifyContent = 'center';
                    graphDiv.innerHTML = `
                        <div style="flex: 1; min-height: 0; width: 100%; height: 100%; position: relative; display: flex; align-items: stretch; justify-content: stretch;">
                            <canvas id="chart_${idx}" style="width:100%;height:100%;display:block;"></canvas>
                        </div>
                        <div style="flex-shrink: 0; text-align: center; margin-top: 6px; font-weight: 600; font-size: 0.9rem;">${m.name || 'Measurement'}</div>
                    `;
                    return graphDiv;
                }

                // Add up to 2 graphs to the first row
                if (group.length > 0) row1.appendChild(createGraphDiv(group[0], 0));
                if (group.length > 1) row1.appendChild(createGraphDiv(group[1], 1));
                // Add up to 2 graphs to the second row
                if (group.length > 2) row2.appendChild(createGraphDiv(group[2], 2));
                if (group.length > 3) row2.appendChild(createGraphDiv(group[3], 3));

                flexContainer.appendChild(row1);
                flexContainer.appendChild(row2);
                graphsContainer.appendChild(flexContainer);

                // Chart.js rendering
                setTimeout(() => {
                    group.forEach((m, idx) => {
                        var ctx = document.getElementById(`chart_${idx}`);
                        if (ctx) {
                            try {
                                var chart = new Chart(ctx, {
                                    type: 'line',
                                    data: {
                                        labels: m.measuredVals.map((_, i) => `G${i + 1}`),
                                        datasets: [
                                            {
                                                label: 'Measured',
                                                data: m.measuredVals,
                                                borderColor: '#007bff',
                                                backgroundColor: 'rgba(0,123,255,0.1)',
                                                fill: false,
                                                tension: 0.2,
                                                pointRadius: 4
                                            },
                                            {
                                                label: 'Reference',
                                                data: m.measuredVals.map(() => m.reference),
                                                borderColor: '#ffc107',
                                                borderDash: [5, 5],
                                                fill: false,
                                                pointRadius: 0
                                            },
                                            {
                                                label: '+Tolerance',
                                                data: m.measuredVals.map(() => m.plusTol),
                                                borderColor: '#28a745',
                                                borderDash: [2, 2],
                                                fill: false,
                                                pointRadius: 0
                                            },
                                            {
                                                label: '-Tolerance',
                                                data: m.measuredVals.map(() => m.minusTol),
                                                borderColor: '#dc3545',
                                                borderDash: [2, 2],
                                                fill: false,
                                                pointRadius: 0
                                            }
                                        ]
                                    },
                                    options: {
                                        maintainAspectRatio: false,
                                        responsive: true,
                                        plugins: {
                                            legend: {
                                                display: true,
                                                labels: {
                                                    font: {
                                                        size: 10
                                                    }
                                                }
                                            }
                                        },
                                        scales: {
                                            x: {
                                                title: {
                                                    display: true,
                                                    text: 'Garment',
                                                    font: {
                                                        size: 10
                                                    }
                                                },
                                                ticks: {
                                                    font: {
                                                        size: 9
                                                    }
                                                }
                                            },
                                            y: {
                                                title: {
                                                    display: true,
                                                    text: 'Value',
                                                    font: {
                                                        size: 10
                                                    }
                                                },
                                                ticks: {
                                                    font: {
                                                        size: 9
                                                    }
                                                }
                                            }
                                        }
                                    }
                                });
                                chartInstances.push(chart);
                            } catch (e) {
                                console.error("Error creating chart:", e);
                            }
                        }
                    });
                }, 0);
            }

            // Show initial group
            graphPage = 0;
            showGroup(graphPage);

            // Set interval for cycling groups if needed
            if (groups.length > 1) {
                graphInterval = setInterval(() => {
                    graphPage = (graphPage + 1) % groups.length;
                    showGroup(graphPage);
                }, 10000); // 10 seconds
            }
        }

        // Global key capture for measured value and navigation
        window.addEventListener('keydown', function (e) {
            if (window.isUILocked) return; // Ignore shortcuts if UI is locked
            var input = document.getElementById('measuredValueInput');
            if (!input) return;

            if ((e.key >= '0' && e.key <= '9') || e.key === '.' || e.key === 'Backspace' || e.key === 'Delete' ||
                e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'Tab') {
                if (document.activeElement !== input) {
                    input.focus();
                }
            }

            if (e.key.toLowerCase() === 'd' || e.key === 'ArrowDown') {
                e.preventDefault();
                nextMeasurement();
            }

            if (e.key === '=' || e.key.toLowerCase() === 'a') {
                e.preventDefault();
                prevMeasurement();
            }
        });
    </script>
    <script src="~/vendors/js/vendor.bundle.base.js"></script>
    <!-- endinject -->
    <!-- Plugin js for this page -->
    <script src="~/vendors/chart.js/Chart.min.js"></script>
    <script src="~/vendors/progressbar.js/progressbar.min.js"></script>
    <script src="~/vendors/jvectormap/jquery-jvectormap.min.js"></script>
    <script src="~/vendors/jvectormap/jquery-jvectormap-world-mill-en.js"></script>
    <script src="~/vendors/owl-carousel-2/owl.carousel.min.js"></script>
    <!-- End plugin js for this page -->
    <!-- inject:js -->
    <script src="~/js/off-canvas.js"></script>
    <script src="~/js/hoverable-collapse.js"></script>
    <script src="~/js/misc.js"></script>
    <script src="~/js/settings.js"></script>
    <script src="~/js/todolist.js"></script>
</body>

</html>