<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Measuring යාළුවා | Menu</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="~/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="~/vendors/css/vendor.bundle.base.css">
    <!-- endinject -->
    <!-- Plugin css for this page -->
    <link rel="stylesheet" href="~/vendors/jvectormap/jquery-jvectormap.css">
    <link rel="stylesheet" href="~/vendors/flag-icon-css/css/flag-icon.min.css">
    <link rel="stylesheet" href="~/vendors/owl-carousel-2/owl.carousel.min.css">
    <link rel="stylesheet" href="~/vendors/owl-carousel-2/owl.theme.default.min.css">
    <!-- End plugin css for this page -->
    <!-- inject:css -->
    <!-- endinject -->
    <!-- Layout styles -->
    <link rel="stylesheet" href="~/css/style.css" />
    <link rel="stylesheet" href="~/css/green.css" />
    <!-- End layout styles -->
    <link rel="shortcut icon" href="~/icon.png" />

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <style>
        /* Change text color of table header */
        #park thead th {
            color: steelblue;
        }

        /* Change text color of table body */
        #park tbody td {
            color: white;
        }


        #trolly thead th {
            color: steelblue;
        }

        /* Change text color of table body */
        #trolly tbody td {
            color: white;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        .content-wrapper {
            display: flex;
            flex-direction: column;
            height: 100vh;
            min-height: 0;
        }
        #measurementCards {
            flex: 0 0 auto;
            min-height: 110px;
            margin: 20px 0;
        }
        #graphsArea {
            flex: 1 1 0;
            display: flex;
            flex-direction: column;
            align-items: stretch;
            justify-content: stretch;
            min-height: 0;
            height: 0;
        }
        #graphsContainer {
            flex: 1 1 0;
            width: 100%;
            height: 100%;
            min-height: 0;
        }
        #measurementNav {
            flex: 0 0 auto;
            min-height: 60px;
            margin: 30px 0 10px 0;
        }
    </style>

</head>

<body>


    <div class="navbar-menu-wrapper p-1 flex-grow d-flex align-items-stretch">

        <ul class="navbar-nav w-100">
            <li class="nav-item w-100">
                <h3 style="text-align: center;">Measuring යාළුවා</h3>
            </li>
        </ul>


    </div>



    <div class="content-wrapper">
        <section id="DetailForm" class="DetailForm" style="display: flex;">
            <div class="grid-margin">
                <div class="card">
                    <div class="card-body">
                        <div class="form-group">
                            <label>SOLI</label>
                            <input type="text" class="form-control" id="SOLI" name="SOLI"
                                placeholder="Enter Sales Order Line Item">
                        </div>
                        <div class="form-group">
                            <label">EPF</label>
                                <input type="text" class="form-control" id="EPF" name="EPF" placeholder="Enter EPF">
                        </div>
                        <div class="form-group"></div>
                        <label">Station</label>
                            <input type="text" class="form-control" id="station" name="station" placeholder="Enter EPF">
                    </div>
                    <div class="form-group">
                        <label>Style</label>
                        <select class="form-control" id="styleSelector" placeholder="Select Style">
                            <option value="" disabled selected>Loading styles...</option>
                        </select>
                    </div>
                    <div class="form-group" style="display:none;" id="sizeSelectDIV">
                        <label>Size</label>
                        <select class="form-control" id="sizeSelector" placeholder="Select Size">
                            <option value="" disabled selected>Select a size...</option>
                        </select>
                    </div>
                    <div class="row">
                        <div class="button-container">
                            <button type="button" onclick="nextBtn()" class="btn-sm btn-inverse-primary btn-fw"
                                style="width: 80px;">Next</button>
                        </div>
                        <div class="button-container">
                            <button type="button" onclick="window.location.href='@Url.Action("Index", "GM")'"
                                class="btn-sm btn-inverse-primary btn-fw" style="width: 80px;">Back</button>
                        </div>
                    </div>
                </div>
            </div>
    </div>
    </section>



    <section id="MeasureInterface" class="MeasureInterface"
        style="display:none; min-height: 100vh; flex-direction: column; justify-content: space-between;">
        <!-- Top Cards -->
        <div id="measurementCards"
            style="display: flex; justify-content: space-around; align-items: center; margin: 20px 0; flex-wrap: wrap;">
            <div class="card measurement-card" id="cardMeasurement"
                style="flex:1; min-width: 180px; margin: 10px; text-align:center;">
                <h5>Measurement</h5>
                <div id="measurementName">-</div>
            </div>
            <div class="card measurement-card" id="cardMeasuredValue"
                style="flex:1; min-width: 180px; margin: 10px; text-align:center;">
                <h5>Measured Value</h5>
                <div id="measuredValue">-</div>
            </div>
            <div class="card measurement-card" id="cardTolerance"
                style="flex:1; min-width: 180px; margin: 10px; text-align:center;">
                <h5>Reference</h5>
                <div id="reference">-</div>
            </div>
            <div class="card measurement-card" id="cardStatus"
                style="flex:1; min-width: 180px; margin: 10px; text-align:center;">
                <h5>Status</h5>
                <div id="passFailStatus">-</div>
            </div>
            <div class="card measurement-card" id="cardCurrentSize"
                style="flex:1; min-width: 180px; margin: 10px; text-align:center;">
                <h5>Current Size</h5>
                <div id="currentSize">-</div>
            </div>
        </div>
        <!-- Graphs Area -->
        <div id="graphsArea"
            style="flex: 1 1 auto; display: flex; flex-direction: column; align-items: stretch; justify-content: stretch; min-height: 350px;">
            <div id="graphsContainer" style="flex: 1 1 auto; display: flex; width: 100%; height: 100%;"></div>
        </div>
        <!-- Bottom Buttons -->
        <div id="measurementNav"
            style="display: flex; justify-content: center; align-items: center; margin: 30px 0 10px 0; gap: 30px;">
            <button type="button" class="btn btn-secondary" onclick="showDetailForm()">Back</button>
            <button type="button" class="btn btn-primary" onclick="prevMeasurement()">Previous Measurement</button>
            <button type="button" class="btn btn-primary" onclick="nextMeasurement()">Next Measurement</button>
        </div>
    </section>
    </div>

    <!-- content-wrapper ends -->
    <!-- partial:partials/_footer.html -->
    <footer class="footer">
        <div class="d-sm-flex justify-content-center justify-content-sm-between">
            <span class="text-muted d-block text-center text-sm-left d-sm-inline-block">Copyright © MAS KREEDA</span>

        </div>
    </footer>


    <!-- main-panel ends -->
    <!-- page-body-wrapper ends -->
    </div>



    <script>
        var measData = [];
        var currentSizeObj = null;
        var currentMeasurementIdx = 0;
        var measuredValues = {}; // { size: { measurement: value } }
        var lastInputTime = 0;
        var garmentSession = '';
        var plant = '@(ViewBag.plant?.ToString() ?? "")';
        var username = '@(ViewBag.account?.ToString() ?? "")';
        var prvlg = '@Html.Raw(Json.Serialize(ViewBag.prvlgtyp))';
        var allGarmentMeasurements = [];
        var graphPage = 0;
        var graphInterval = null;
        var chartInstances = [];

        document.addEventListener('DOMContentLoaded', function () {
            loadStyles();
            var styleSelector = document.getElementById('styleSelector');
            var sizeSelectDIV = document.getElementById('sizeSelectDIV');
            styleSelector.addEventListener('change', function () {
                console.log("Style selected..Loading sizes...")
                getMeasureData();
                sizeSelectDIV.style.display = 'flex';
            });
            styleSelector.addEventListener('click', function () {
                console.log("Clicked on the style selector");
                @* sizeSelectDIV.style.display = 'none'; *@
                var sizeSelector = document.getElementById('sizeSelector');
                sizeSelector.innerHTML = '';
                var placeholderOption = document.createElement('option');
                placeholderOption.value = '';
                placeholderOption.text = 'Loading sizes...';
                placeholderOption.disabled = true;
                placeholderOption.selected = true;
                sizeSelector.appendChild(placeholderOption);
            });
        });
        function loadStyles() {
            console.log("Loading styles...");
            console.log(username);
            console.log(station);
            console.log(prvlg);
            $.ajax({
                url: '/GM/getStyles',
                method: 'POST',
                success: function (response) {
                    var styleSelector = document.getElementById('styleSelector');
                    styleSelector.innerHTML = '';

                    // Add placeholder option
                    var placeholderOption = document.createElement('option');
                    placeholderOption.value = '';
                    placeholderOption.text = 'Select a style';
                    placeholderOption.disabled = true;
                    placeholderOption.selected = true;
                    styleSelector.appendChild(placeholderOption);

                    if (response.styles && Array.isArray(response.styles)) {
                        response.styles.forEach(function (style) {
                            var option = document.createElement('option');
                            option.value = style;
                            option.text = style;
                            styleSelector.appendChild(option);
                        });
                    }
                }
            });
        }
        function styleSelected() {
            document.getElementById('styleSelectDIV').style.display = 'flex';
        }
        function generateSession() {
            // Generate a cryptographically strong random string of at least 25 characters (base64url)
            const array = new Uint8Array(20); // 20 bytes = 160 bits ~ 27 base64url chars
            window.crypto.getRandomValues(array);
            // Convert to base64url
            let base64 = btoa(String.fromCharCode.apply(null, array));
            base64 = base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
            return username + '_' + base64;
        }
        function nextBtn() {
            var soli = document.getElementById('SOLI').value.trim();
            var epf = Number(document.getElementById('EPF').value.trim());
            var style = document.getElementById('styleSelector').value;
            var size = document.getElementById('sizeSelector').value;
            if (!soli || !epf || !style || !size) {
                alert("Please fill in all fields: SOLI, EPF, Style, and Size.");
                return;
            }
            garmentSession = generateSession();
            document.getElementById('DetailForm').style.display = 'none';
            document.getElementById('MeasureInterface').style.display = 'flex';
            // Reset measured values for new garment
            if (!measuredValues[size]) measuredValues[size] = {};
            currentMeasurementIdx = 0;
            showMeasurement(currentMeasurementIdx);
        }

        function getMeasureData() {
            var style = document.getElementById('styleSelector').value;
            console.log("Loading Measurement Data...");
            $.ajax({
                url: '/GM/getMeasurements',
                method: 'POST',
                data: { style: style },
                success: function (response) {
                    console.log("Recevived Data")
                    measData = response.measurements;
                    console.log(measData);
                    loadSizes();
                }
            });

        }
        function loadSizes() {
            console.log("Getting sizes...");
            @* console.log(measData); *@
            var sizeSelector = document.getElementById('sizeSelector');
            sizeSelector.innerHTML = '';
            var placeholderOption = document.createElement('option');
            placeholderOption.value = '';
            placeholderOption.text = 'Select a size';
            placeholderOption.disabled = true;
            placeholderOption.selected = true;
            sizeSelector.appendChild(placeholderOption);
            if (Array.isArray(measData)) {
                measData.forEach(function (item) {
                    if (item.size) {
                        var option = document.createElement('option');
                        option.value = item.size;
                        option.text = item.size;
                        sizeSelector.appendChild(option);
                    }
                });
            }
            sizeSelector.onchange = onSizeSelected;
        }

        function onSizeSelected() {
            var size = document.getElementById('sizeSelector').value;
            currentSizeObj = (measData || []).find(x => x.size === size);
            currentMeasurementIdx = 0;
            if (currentSizeObj && Array.isArray(currentSizeObj.measurements) && currentSizeObj.measurements.length > 0) {
                showMeasurement(currentMeasurementIdx);
            } else {
                clearMeasurementCards();
            }
            document.getElementById('currentSize').innerText = size || '-';
        }

        function showMeasurement(idx) {
            if (!currentSizeObj || !currentSizeObj.measurements || !currentSizeObj.measurements[idx]) {
                clearMeasurementCards();
                return;
            }
            var m = currentSizeObj.measurements[idx];
            document.getElementById('measurementName').innerText = m.measurement || '-';
            // Measured value input
            var measuredValueDiv = document.getElementById('measuredValue');
            measuredValueDiv.innerHTML = `<input id="measuredValueInput" type="number" style="width:90px; text-align:center; font-size:1.2em;" autocomplete="off" />`;
            var input = document.getElementById('measuredValueInput');
            // Set value if already entered
            var size = document.getElementById('sizeSelector').value;
            if (measuredValues[size] && measuredValues[size][m.measurement]) {
                input.value = measuredValues[size][m.measurement];
            }
            input.oninput = function (e) {
                var now = Date.now();
                if (now - lastInputTime > 2000) {
                    input.value = e.target.value.slice(-1); // Only keep the last entered digit
                }
                lastInputTime = now;
                if (!measuredValues[size]) measuredValues[size] = {};
                measuredValues[size][m.measurement] = input.value;
                updatePassFail(input.value, m);
                updateGraphsForCurrentGarment();
            };
            // Reference ± Tolerance
            document.getElementById('reference').innerText = `${m.reference} ± ${m.tolerance}`;
            // Status
            updatePassFail(input.value, m);
            // Focus input on show
            setTimeout(() => { input.focus(); }, 100);
            // Update graphs on show
            updateGraphsForCurrentGarment();
        }

        function updatePassFail(val, m) {
            var statusDiv = document.getElementById('passFailStatus');
            var ref = Number(m.reference);
            var tol = Number(m.tolerance);
            var num = Number(val);
            if (!val) {
                statusDiv.innerText = '-';
                statusDiv.style.color = '';
                return;
            }
            if (num >= (ref - tol) && num <= (ref + tol)) {
                statusDiv.innerText = 'PASS';
                statusDiv.style.color = 'green';
            } else {
                statusDiv.innerText = 'FAIL';
                statusDiv.style.color = 'red';
            }
        }

        function clearMeasurementCards() {
            document.getElementById('measurementName').innerText = '-';
            document.getElementById('measuredValue').innerHTML = '-';
            document.getElementById('reference').innerText = '-';
            document.getElementById('passFailStatus').innerText = '-';
            document.getElementById('passFailStatus').style.color = '';
            document.getElementById('currentSize').innerText = '-';
        }

        function prevMeasurement() {
            if (!currentSizeObj || !currentSizeObj.measurements) return;
            if (currentMeasurementIdx > 0) {
                currentMeasurementIdx--;
                showMeasurement(currentMeasurementIdx);
            }
        }
        function nextMeasurement() {
            if (!currentSizeObj || !currentSizeObj.measurements) return;
            if (currentMeasurementIdx < currentSizeObj.measurements.length - 1) {
                currentMeasurementIdx++;
                showMeasurement(currentMeasurementIdx);
            } else {
                // At last measurement, check overall status
                checkOverallStatusAndPrompt();
            }
        }
        function checkOverallStatusAndPrompt() {
            var size = document.getElementById('sizeSelector').value;
            var measurements = (currentSizeObj && currentSizeObj.measurements) ? currentSizeObj.measurements : [];
            var allPass = true;
            var measurementResults = [];
            measurements.forEach(function (m) {
                var val = measuredValues[size] && measuredValues[size][m.measurement] ? Number(measuredValues[size][m.measurement]) : null;
                var offset = val !== null ? val - Number(m.reference) : null;
                var mStatus = (val !== null && val >= (m.reference - m.tolerance) && val <= (m.reference + m.tolerance)) ? 'Pass' : 'Fail';
                if (mStatus === 'Fail') allPass = false;
                measurementResults.push({
                    Measurement: m.measurement,
                    Value: val,
                    Offset: offset,
                    mStatus: mStatus
                });
            });
            var status = allPass ? 'Pass' : 'Fail';
            if (!allPass) {
                if (confirm('Garment failed. Would you like to save or retry? (OK = Save, Cancel = Retry)')) {
                    saveGarment(status, measurementResults);
                } else {
                    // Retry: clear values for this size and go to first measurement
                    measuredValues[size] = {};
                    currentMeasurementIdx = 0;
                    showMeasurement(currentMeasurementIdx);
                }
            } else {
                saveGarment(status, measurementResults);
            }
        }
        function saveGarment(status, measurementResults) {
            var soli = document.getElementById('SOLI').value.trim();
            var epf = Number(document.getElementById('EPF').value.trim());
            var style = document.getElementById('styleSelector').value;
            var size = document.getElementById('sizeSelector').value;
            var payload = {
                Session: garmentSession,
                Style: style,
                Size: size,
                SOLI: soli,
                EPF: epf,
                Status: status,
                DateTime: new Date().toISOString().replace('T', ' ').substring(0, 23),
                Station: (plant + "_" + (document.getElementById('station').value)).toUpperCase(),
                Measurements: measurementResults
            };
            // Add this garment's measurements to the global array for graphing
            allGarmentMeasurements.push({ size, measurements: measurementResults });
            updateGraphsForCurrentGarment();
            $.ajax({
                url: '/GM/saveMData',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (res) {
                    alert('Garment data saved!');
                    measuredValues[size] = {};
                    currentMeasurementIdx = 0;
                    showMeasurement(currentMeasurementIdx);
                },
                error: function () {
                    alert('Error saving garment data.');
                }
            });
        }
        function updateGraphsForCurrentGarment() {
            var size = document.getElementById('sizeSelector').value;
            if (!currentSizeObj || !Array.isArray(currentSizeObj.measurements)) {
                renderGraphs([]);
                return;
            }
            // Build graph data for each measurement name
            var measurementNames = currentSizeObj.measurements.map(m => m.measurement);
            var referenceMap = {};
            currentSizeObj.measurements.forEach(m => {
                referenceMap[m.measurement] = { ref: m.reference, tol: m.tolerance };
            });
            // For each measurement, collect measured values for all garments
            var graphData = measurementNames.map(function (name) {
                var ref = referenceMap[name].ref;
                var tol = referenceMap[name].tol;
                var measuredVals = allGarmentMeasurements
                    .filter(g => g.size === size)
                    .map(g => {
                        var m = g.measurements.find(x => x.Measurement === name);
                        return m ? m.Value : null;
                    });
                // Add current in-progress value if not yet saved
                var currentVal = measuredValues[size] && measuredValues[size][name] ? Number(measuredValues[size][name]) : null;
                if (currentVal !== null && (measuredVals.length === 0 || measuredVals.length < allGarmentMeasurements.length + 1)) {
                    measuredVals.push(currentVal);
                }
                return {
                    name: name,
                    measuredVals: measuredVals,
                    reference: ref,
                    plusTol: ref + tol,
                    minusTol: ref - tol
                };
            });
            renderGraphs(graphData);
        }
        function showDetailForm() {
            document.getElementById('DetailForm').style.display = 'flex';
            document.getElementById('MeasureInterface').style.display = 'none';
            // Reset/clear graphs and all garment data
            allGarmentMeasurements = [];
            renderGraphs([]);
        }
        function renderGraphs(measurements) {
            const graphsContainer = document.getElementById('graphsContainer');
            graphsContainer.innerHTML = '';

            // Destroy old charts
            if (window.chartInstances && Array.isArray(window.chartInstances)) {
                window.chartInstances.forEach(c => { try { c.destroy(); } catch { } });
            }
            window.chartInstances = [];

            if (!Array.isArray(measurements) || measurements.length === 0) {
                graphsContainer.innerHTML = '<div>No measurement data available.</div>';
                return;
            }
            // Group measurements in sets of 4
            const groups = [];
            for (let i = 0; i < measurements.length; i += 4) {
                groups.push(measurements.slice(i, i + 4));
            }
            function showGroup(page) {
                graphsContainer.innerHTML = '';
                const group = groups[page] || [];
                // Create a 2x2 grid that fills the available area
                const grid = document.createElement('div');
                grid.style.display = 'grid';
                grid.style.gridTemplateColumns = '1fr 1fr';
                grid.style.gridTemplateRows = '1fr 1fr';
                grid.style.gap = '32px';
                grid.style.width = '100%';
                grid.style.height = '100%';
                grid.style.minHeight = 0;
                grid.style.justifyItems = 'stretch';
                grid.style.alignItems = 'stretch';
                group.forEach((m, idx) => {
                    const graphDiv = document.createElement('div');
                    graphDiv.id = 'graph_' + idx;
                    graphDiv.style.width = '100%';
                    graphDiv.style.height = '100%';
                    graphDiv.style.minHeight = 0;
                    graphDiv.style.display = 'flex';
                    graphDiv.style.flexDirection = 'column';
                    graphDiv.style.alignItems = 'center';
                    graphDiv.style.justifyContent = 'center';
                    graphDiv.innerHTML = `<canvas id="chart_${idx}" style="width:100%;height:100%;max-width:100%;max-height:100%;"></canvas><div style="margin-top:8px; font-weight:600;">${m.name || 'Measurement'}</div>`;
                    grid.appendChild(graphDiv);
                    setTimeout(() => {
                        var ctx = document.getElementById(`chart_${idx}`);
                        if (ctx) {
                            var chart = new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: m.measuredVals.map((_, i) => `G${i + 1}`),
                                    datasets: [
                                        {
                                            label: 'Measured',
                                            data: m.measuredVals,
                                            borderColor: '#007bff',
                                            backgroundColor: 'rgba(0,123,255,0.1)',
                                            fill: false,
                                            tension: 0.2,
                                            pointRadius: 4
                                        },
                                        {
                                            label: 'Reference',
                                            data: m.measuredVals.map(() => m.reference),
                                            borderColor: '#ffc107',
                                            borderDash: [5, 5],
                                            fill: false,
                                            pointRadius: 0
                                        },
                                        {
                                            label: '+Tolerance',
                                            data: m.measuredVals.map(() => m.plusTol),
                                            borderColor: '#28a745',
                                            borderDash: [2, 2],
                                            fill: false,
                                            pointRadius: 0
                                        },
                                        {
                                            label: '-Tolerance',
                                            data: m.measuredVals.map(() => m.minusTol),
                                            borderColor: '#dc3545',
                                            borderDash: [2, 2],
                                            fill: false,
                                            pointRadius: 0
                                        }
                                    ]
                                },
                                options: {
                                    maintainAspectRatio: false,
                                    responsive: true,
                                    plugins: { legend: { display: true } },
                                    scales: {
                                        x: { title: { display: true, text: 'Garment' } },
                                        y: { title: { display: true, text: 'Value' } }
                                    }
                                }
                            });
                            window.chartInstances.push(chart);
                        }
                    }, 0);
                });
                graphsContainer.appendChild(grid);
            }
            showGroup(graphPage);
            if (groups.length > 1) {
                if (graphInterval) clearInterval(graphInterval);
                graphInterval = setInterval(() => {
                    graphPage = (graphPage + 1) % groups.length;
                    showGroup(graphPage);
                }, 5000);
            } else if (graphInterval) {
                clearInterval(graphInterval);
                graphInterval = null;
            }
        }
        // Global key capture for measured value and navigation
        window.addEventListener('keydown', function (e) {
            var input = document.getElementById('measuredValueInput');
            if (!input) return;
            // Only allow number keys, backspace, delete, arrows, dot
            if ((e.key >= '0' && e.key <= '9') || e.key === '.' || e.key === 'Backspace' || e.key === 'Delete' || e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'Tab') {
                if (document.activeElement !== input) {
                    input.focus();
                }
            }
            // Navigation
            if (e.key.toLowerCase() === 'd' || e.key === 'ArrowDown') {
                e.preventDefault();
                nextMeasurement();
            }
            if (e.key === '=' || e.key.toLowerCase() === 'a') {
                e.preventDefault();
                prevMeasurement();
            }
        });
    </script>

    <!-- container-scroller -->
    <!-- plugins:js -->
    <script src="~/vendors/js/vendor.bundle.base.js"></script>
    <!-- endinject -->
    <!-- Plugin js for this page -->
    <script src="~/vendors/chart.js/Chart.min.js"></script>
    <script src="~/vendors/progressbar.js/progressbar.min.js"></script>
    <script src="~/vendors/jvectormap/jquery-jvectormap.min.js"></script>
    <script src="~/vendors/jvectormap/jquery-jvectormap-world-mill-en.js"></script>
    <script src="~/vendors/owl-carousel-2/owl.carousel.min.js"></script>
    <!-- End plugin js for this page -->
    <!-- inject:js -->
    <script src="~/js/off-canvas.js"></script>
    <script src="~/js/hoverable-collapse.js"></script>
    <script src="~/js/misc.js"></script>
    <script src="~/js/settings.js"></script>
    <script src="~/js/todolist.js"></script>
    <!-- <script src="~/js/chart.js"></script> -->
    <!-- endinject -->
    <!-- Custom js for this page -->
    <!-- End custom js for this page -->



</body>


</html>